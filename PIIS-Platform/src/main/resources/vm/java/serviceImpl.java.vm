package ${packageName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tech.piis.common.exception.BaseException;
import tech.piis.modules.core.domain.po.PiisDocumentPO;
import tech.piis.modules.core.domain.vo.UnitsBizCountVO;
import tech.piis.modules.core.service.IPiisDocumentService;

import java.util.Arrays;
import java.util.List;

import static tech.piis.common.constant.OperationConstants.INSERT;

import  ${packageName}.mapper.${ClassName}Mapper;
import  ${packageName}.domain.po.${ClassName}PO;
import  ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Transactional
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    @Autowired
    private IPiisDocumentService documentService;


    /**
     * 统计巡视方案下被巡视单位${ClassName}次数
     * @param planId 巡视计划ID
     *
     */
    @Override
    public List<UnitsBizCountVO> select${ClassName}Count(String planId) throws BaseException {
        return ${className}Mapper.select${ClassName}Count(planId);
    }

    /**
     * 查询${functionName}列表
     * @param ${className}
     * @return
     * @throws BaseException
     */
    @Override
    public List<${ClassName}PO> select${ClassName}List(${ClassName}PO ${className}) throws BaseException {
        QueryWrapper<${ClassName}PO> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("units_id", ${className}.getUnitsId());
        queryWrapper.eq("plan_id", ${className}.getPlanId());
        return ${className}Mapper.selectList(queryWrapper);
    }

    /**
     * 新增${functionName}
     * @param ${className}
     * @return
     * @throws BaseException
     */
    @Override
    public int save(${ClassName}PO ${className}) throws BaseException {
        int result = ${className}Mapper.insert(${className});
        List<PiisDocumentPO> documents = ${className}.getDocuments();
        documents.forEach(document -> document.setOperationType(INSERT));
        Object bizId = null;
        documentService.updateDocumentBatch(documents, "${ClassName}" + bizId, null);
        return result;
    }

    /**
     * 根据ID修改${functionName}
     * @param ${className}
     * @return
     * @throws BaseException
     */
    @Override
    public int update(${ClassName}PO ${className}) throws BaseException {
        Object bizId = null;
        documentService.updateDocumentBatch(${className}.getDocuments(), "${ClassName}" + bizId, null);
        return ${className}Mapper.updateById(${className});
    }

    /**
     * 根据ID批量删除${functionName}
     * @param ${pkColumn.javaField}s ${functionName}编号
     *
     * @return
     */
    @Override
    public int deleteBy${ClassName}Ids(${pkColumn.javaType}[]${pkColumn.javaField}s) {
        List<Long> list = Arrays.asList(${pkColumn.javaField}s);
        return ${className}Mapper.deleteBatchIds(list);
    }


    /**
    * 统计总数
    * @return
    */
    @Override
    public int count() {
        return ${className}Mapper.selectCount(null);
    }
}
