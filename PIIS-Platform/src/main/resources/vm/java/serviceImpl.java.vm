package ${packageName}.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tech.piis.common.enums.OperationEnum;
import tech.piis.common.exception.BaseException;
import tech.piis.modules.core.domain.po.PiisDocumentPO;
import tech.piis.modules.core.service.IPiisDocumentService;
import org.springframework.context.ApplicationListener;
import tech.piis.modules.core.event.WorkFlowEvent;
import tech.piis.modules.core.domain.vo.PlanBriefVO;
import tech.piis.modules.core.service.IInspectionPlanService;
import tech.piis.modules.workflow.service.IWfWorkflowTodoService;
import tech.piis.modules.workflow.domain.po.WfWorkFlowTodoPO;
import tech.piis.framework.utils.BizUtils;
import org.springframework.util.CollectionUtils;
import tech.piis.common.enums.ApprovalEnum;
import tech.piis.modules.core.domain.vo.UnitsBizCountVO;
import tech.piis.modules.core.domain.vo.PlanBriefVO;
import static tech.piis.common.constant.PiisConstants.*;


import java.util.Arrays;
import java.util.List;

import static tech.piis.common.constant.OperationConstants.INSERT;

import  ${packageName}.mapper.${ClassName}Mapper;
import  ${packageName}.domain.po.${ClassName}PO;
import  ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Transactional
@Slf4j
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service, ApplicationListener<WorkFlowEvent>  {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    @Autowired
    private IPiisDocumentService documentService;

    @Autowired
    private IInspectionPlanService planService;

    @Autowired
    private IWfWorkflowTodoService todoService;

    /**
     * 统计巡视方案下被巡视单位${ClassName}次数
     * @param planId 巡视计划ID
     *
     */
    @Override
    public List<UnitsBizCountVO> select${ClassName}Count(String planId) throws BaseException {
        return ${className}Mapper.select${ClassName}Count(planId);
    }

    /**
     * 查询${functionName}列表
     * @param ${className}
     * @return
     * @throws BaseException
     */
    @Override
    public List<${ClassName}PO> select${ClassName}List(${ClassName}PO ${className}) throws BaseException {
        QueryWrapper<${ClassName}PO> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("UNITS_ID", ${className}.getUnitsId());
        queryWrapper.eq("PLAN_ID", ${className}.getPlanId());
        List<${ClassName}PO> ${className}List = ${className}Mapper.selectList(queryWrapper);
        if(!CollectionUtils.isEmpty(${className}List)){
                ${className}List.forEach(var -> {
                    var.setDocuments(documentService.getFileListByBizId("${ClassName}"));
                });
        }
        return ${className}List;
    }

    /**
     * 新增${functionName}
     * @param ${className}
     * @return
     * @throws BaseException
     */
    @Override
    public int save(${ClassName}PO ${className}) throws BaseException {
        int result = ${className}Mapper.insert(${className});
        List<PiisDocumentPO> documents = ${className}.getDocuments();
        documents.forEach(document -> document.setOperationType(INSERT));
        Object bizId = null;
        documentService.updateDocumentBatch(documents, "${ClassName}" + bizId, null);
        return result;
    }

    /**
     * 根据ID修改${functionName}
     * @param ${className}
     * @return
     * @throws BaseException
     */
    @Override
    public int update(${ClassName}PO ${className}) throws BaseException {
        Object bizId = null;
        documentService.updateDocumentBatch(${className}.getDocuments(), "${ClassName}" + bizId, null);
        return ${className}Mapper.updateById(${className});
    }

    /**
     * 根据ID批量删除${functionName}
     * @param ${pkColumn.javaField}s ${functionName}编号
     *
     * @return
     */
    @Override
    public int deleteBy${ClassName}Ids(${pkColumn.javaType}[]${pkColumn.javaField}s) throws BaseException {
        List<Long> list = Arrays.asList(${pkColumn.javaField}s);
        return ${className}Mapper.deleteBatchIds(list);
    }


    /**
     * 新增代办
     *
     * @param ${className}
     */
    private void handleTodo(${ClassName}PO ${className}) {
        String planId = ${className}.getPlanId();
        Long unitsId = ${className}.getUnitsId();
        PlanBriefDTO planBriefDTO = new PlanBriefDTO()
                .setPlanId(planId)
                .setUnitsId(unitsId);
        PlanBriefVO planPO = planService.selectPiisBrief(planBriefDTO);
        WfWorkFlowTodoPO wfWorkFlowTodoPO = new WfWorkFlowTodoPO()
                .setLookStatus(NO_LOOK)
                .setTodoName("[XX]-" + planPO.getPlanName() + "-" + planPO.getGroupName() + "-" + planPO.getOrgName())
                .setBusinessId("")
                .setTodoStatus(TODO_NEED)
                .setApproverId(${className}.getApproverId())
                .setApproverName(${className}.getApproverName());
        BizUtils.setCreatedOperation(WfWorkFlowTodoPO.class, wfWorkFlowTodoPO);
        todoService.saveWorkflowTodo(wfWorkFlowTodoPO);
    }

   /**
   * 批量审批
   * @throws BaseException
   */
    @Override
    public void doApprovals(List<${ClassName}PO> ${className}List) throws BaseException {
        if (!CollectionUtils.isEmpty(${className}List)) {
                ${className}List.forEach(${className} -> {
                ${className}.setApprovalFlag(ApprovalEnum.SUBMITTING.getCode());
                ${className}Mapper.updateById(${className}.setDocuments(null));
                handleTodo(${className});
            });
        }

        }

    /**
   * Handle an application event.
   *
   * @param event the event to respond to
   */
    @Override
    public void onApplicationEvent(WorkFlowEvent event) {
        Object object = event.getSource();
        if (object instanceof ${ClassName}ServiceImpl) {
            Integer eventType = event.getEventType();
            ${ClassName}PO ${className} = new ${ClassName}PO();
            if(OperationEnum.SELECT.getCode() == eventType){
                event.setData(null);
            }else if(OperationEnum.UPDATE.getCode() == eventType){
                Integer continueApprovalFlag = event.getContinueApprovalFlag();
                Integer agreeFlag = event.getAgreeFlag();
                if (NO_APPROVAL == continueApprovalFlag) {
                    if (AGREE == agreeFlag) {
                        ${className}.setApprovalFlag(ApprovalEnum.PASSED.getCode());
                    } else {
                        ${className}.setApprovalFlag(ApprovalEnum.REJECTED.getCode());
                    }
                } else {
                    ${className}.setApprovalFlag(ApprovalEnum.SUBMITTING.getCode());
                }
                BizUtils.setUpdatedOperation(${ClassName}PO .class, ${className});
                ${className}Mapper.updateById(${className});
            }
        }
    }
}
