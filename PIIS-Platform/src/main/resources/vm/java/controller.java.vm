package ${packageName}.controller;

import java.util.List;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.*;
import tech.piis.common.exception.BaseException;
import tech.piis.framework.aspectj.lang.annotation.Log;
import tech.piis.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.domain.po.${ClassName}PO;
import ${packageName}.service.I${ClassName}Service;
import tech.piis.framework.utils.BizUtils;
import tech.piis.framework.web.controller.BaseController;
import tech.piis.framework.web.domain.AjaxResult;
import tech.piis.common.constant.BizConstants;
import tech.piis.framework.web.page.TableDataInfo;
import tech.piis.modules.core.service.IPiisDocumentService;
import static tech.piis.common.constant.PiisConstants.NO_APPROVAL;
import tech.piis.common.enums.ApprovalEnum;

import javax.validation.Valid;


/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/piis/${businessName}")
public class ${ClassName}Controller extends BaseController {
    @Autowired
    private I${ClassName}Service ${className}Service;

    @Autowired
    private IPiisDocumentService documentService;

    /**
     *
     * 查询${functionName}列表
     * @param  ${className}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
    public TableDataInfo list(${ClassName}PO ${className}) throws BaseException{
        startPage();
        List<${ClassName}PO> data = ${className}Service.select${ClassName}List(${className});
        return getDataTable(data);
    }

    /**
     * 查询${functionName}总览列表
     *
     * @param planId 巡视计划ID
    */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping("/count")
    public AjaxResult count${ClassName}List(String planId) throws BaseException{
        return AjaxResult.success(${className}Service.select${ClassName}Count(planId));
    }
    /**
     * 新增${functionName}
     * @param  ${className}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody @Valid ${ClassName}PO ${className}) {
        if (null == ${className}) {
            return AjaxResult.error(BizConstants.PARAMS_NULL);
        }
        if (NO_APPROVAL == ${className}.getIsApproval()) {
            ${className}.setApprovalFlag(ApprovalEnum.NO_APPROVAL.getCode());
        } else {
            ${className}.setApprovalFlag(ApprovalEnum.TO_BE_SUBMIT.getCode());
        }
        BizUtils.setCreatedOperation(${ClassName}PO.class, ${className});
        return toAjax(${className}Service.save(${className}));
    }

    /**
     * 审批${functionName}
     * @param  ${className}List
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:approval')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping("approval")
    public AjaxResult add(@RequestBody List<${ClassName}PO> ${className}List) {
        if (CollectionUtils.isEmpty(${className}List)) {
            return AjaxResult.error(BizConstants.PARAMS_NULL);
        }
        ${className}Service.doApprovals(${className}List);
        return AjaxResult.success();
    }

    /**
     * 修改${functionName}
     * @param  ${className}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName}PO ${className}) throws BaseException{
        if (null == ${className}) {
            return AjaxResult.error(BizConstants.PARAMS_NULL);
        }
        if (NO_APPROVAL == ${className}.getIsApproval()) {
            ${className}.setApprovalFlag(ApprovalEnum.NO_APPROVAL.getCode());
        } else {
            ${className}.setApprovalFlag(ApprovalEnum.TO_BE_SUBMIT.getCode());
        }
        BizUtils.setUpdatedOperation(${ClassName}PO.class, ${className});
        return toAjax(${className}Service.update(${className}));
    }

    /**
     * 删除${functionName}
     * ${pkColumn.javaField}s ${functionName}ID数组
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) throws BaseException{
        return toAjax(${className}Service.deleteBy${ClassName}Ids(${pkColumn.javaField}s));
    }

    /**
    * 参数类型转换
    *
    * @param ${className}
    */
    private void ${className}Covert2String(${ClassName}PO ${className}){

    }


    /**
    * 参数类型转换
    *
    * @param ${className}List
    */
    private void ${className}Covert2List(List<${ClassName}PO> ${className}List){

    }
}
